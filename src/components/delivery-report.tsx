"use client";

import { useState, useEffect } from "react";
import { useDeliveries, Delivery } from "@/lib/storage";
import { Button } from "@/components/ui/button";
import { suggestOptimalDeliveryQuantities } from "@/ai/flows/suggest-deliveries";
import { Loader2, Printer } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

export default function DeliveryReport() {
  const { deliveries } = useDeliveries();
  const [loading, setLoading] = useState(true);
  const [report, setReport] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [currentDate, setCurrentDate] = useState('');

  useEffect(() => {
    setCurrentDate(new Date().toLocaleDateString('en-GB', {
        weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
    }));
    
    const fetchReport = async () => {
        if (deliveries.length === 0) {
            setError("No delivery history available to generate a report.");
            setLoading(false);
            return;
        }

        setLoading(true);
        setError(null);
        try {
            const deliveryHistory = deliveries.map(d => JSON.stringify(d)).join('\n');
            const res = await suggestOptimalDeliveryQuantities({ deliveryHistory, currentDate: new Date().toISOString() });
            setReport(res.suggestions);
        } catch (err) {
            console.error(err);
            setError("Failed to generate the report from AI. Please try again.");
        } finally {
            setLoading(false);
        }
    };
    fetchReport();
  }, [deliveries]);

  const handlePrint = () => {
    window.print();
  };

  return (
    <div className="space-y-6">
        <div className="flex justify-end no-print">
            <Button onClick={handlePrint} disabled={loading || !report}>
                <Printer className="mr-2 h-4 w-4" />
                Print Report
            </Button>
        </div>

        {loading && (
            <div className="flex items-center justify-center py-12">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="ml-4 text-muted-foreground">Generating AI-powered report...</p>
            </div>
        )}

        {error && (
            <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
            </Alert>
        )}

        {report && (
            <div id="printable-area" className="p-4 bg-white text-black rounded-lg shadow-lg border">
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold font-headline">SudsTrack Daily Delivery Plan</h1>
                    <p className="text-lg">{currentDate}</p>
                </div>
                <div className="prose prose-lg max-w-none whitespace-pre-wrap">
                    {report}
                </div>
                <div className="mt-12 text-center text-xs text-gray-500">
                    <p>Generated by SudsTrack AI</p>
                </div>
            </div>
        )}
    </div>
  );
}
